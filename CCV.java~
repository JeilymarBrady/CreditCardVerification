/*
Name:  Jeilymar Brady
Assignment:   4
Title: Credit Card Validation
Course: CSCE144 
Section: 1 - Hauser
Lab Section: 2 - Hauser
Semester: Spring 2014 
Instructor: Hauser
Date: 3 April 2014
Sources consulted:   
Known Bugs: none
Program Description: 
Creativity: 
Instructions: javac CCV.java then java CCV then follow onscreen instructions
*/

import java.util.Scanner;

public class CCV
{
	public static void main(String[] args)
	{
		Scanner keyboard = new Scanner(System.in); 
		
		
		//identifier declarations
		String cardType ;	//type of card
		
		System.out.println( "Enter a number: " ) ;
		long number = keyboard.nextLong() ;
		
		if ( number = 0 ) 
			System.exit(0) ;
		
		while ( number > 100 ) {
			number = number / 10 ;
		}
		
		System.out.println( "The " + cardType + " credit card number " + number + " is " + invalid"." ) ;
		
		
		/** 
		* Return true if credit card number is valid 
		*/ 
		public static boolean isValid(long total) {
			if (total % 10 == 0) {
			    return true;
			}
			return false;
		}

		/** 
		* Perform the computation in STEP 2 and return the result 
		*/ 
		public static int sumOfDoubleEvenPlace( long number ) {
			
			int sum = 0;
			number = number / 10;
			while (number != 0) {
			    sum = sum + getDigit((int)((number % 10) * 2));
			    number = number / 100;
			}
			System.out.println(sum);
			return sum ;
		}
		
		/** 
		* Return the number if it is 0-9, otherwise return the sum of the digits 
		*/ 
		public static int getDigit( long number ) {
			
			if (number <= 9) {
			    return number;
			} else if (number > 9)
			    return (number % 10 + number / 10);
	
			    return number;
		}
		
		
		/** 
		* Return the sum of the odd-place digits 
		*/ 
		public static int sumOfOddPlaces( long number ) {
			int sum = 0;
			while (number != 0) {
			    sum += (int)(number % 10);
			    number = number / 100;
			}
			System.out.println(sum);
			return sum;
		}
		
		/** 
		* Return true if the credit card number contains the prefix d 
		*/ 
		public static boolean prefixMatched( long number, int d) {
			d = getPrefix(number, getSize(d) ) ;
			if ( prefixMatched(number, d) == 4 ) {
				cardType = "Visa" ;
			} else if ( prefixMatched(number, d) == 5 ) {
				cardType = "MasterCard" ;
			} else if ( prefixMatched(number, d) == 6 ) {
				cardType = "Discover" ;
			} else if ( prefixMatched(number, d) == 3 ) {
				cardType = "AmericanExpress" ;
			} else if ( prefixMatched(number, d) == 0 ) {
				System.exit(0) ;
			} else {
				cardType = "unknown prefix" ;
			}
			return true ;
		}
			
		/** 
		* Return the number of digits in number 
		*/ 
		public static int getSize( long number ) {
			int length = 0;
			while (number > 0) {
				number /= 10;
				length++;
			}
			return length;
		}
		
		/** 
		* Return the first k digits from number. If the number of 
		* digits in number is less than k, return the number 
		*/ 
	*/	public static long getPrefix( long number, int k ) {
			long result = number;
			for (int i = 0; i < getSize(number) - (k - 1); i++)
			    result = result / 10;
			return result;
		}
		
		
	
}
